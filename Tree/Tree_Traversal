class Node2 {
    int data;
    Node2 left;
    Node2 right;

    public Node2(int key) {
        data = key;
        left = null;
        right = null;
    }
}

public class Tree_Traversal {

    // Method to print inorder traversal of the tree
    public void printInorder(Node2 node) {
        if (node == null)
            return;

        printInorder(node.left);
        System.out.print(node.data + " ");
        printInorder(node.right);
    }

    // Method to print preorder traversal of the tree
    public void printPreorder(Node2 node) {
        if (node == null)
            return;

        System.out.print(node.data + " ");
        printPreorder(node.left);
        printPreorder(node.right);
    }

    // Method to print postorder traversal of the tree
    public void printPostorder(Node2 node) {
        if (node == null)
            return;

        printPostorder(node.left);
        printPostorder(node.right);
        System.out.print(node.data + " ");
    }

    public static void main(String[] args) {
        Tree_Traversal treeCount = new Tree_Traversal();

        Node2 root = new Node2(50);
        root.left = new Node2(25);
        root.right = new Node2(30);
        root.left.left = new Node2(35);
        root.left.right = new Node2(40);
        root.right.left = new Node2(50);
        root.right.right = new Node2(60);
        root.left.right.right = new Node2(70);


        System.out.print("Inorder traversal: ");
        treeCount.printInorder(root);
        System.out.println();

        System.out.print("Preorder traversal: ");
        treeCount.printPreorder(root);
        System.out.println();

        System.out.print("Postorder traversal: ");
        treeCount.printPostorder(root);
        System.out.println();
    }
}
