import java.util.ArrayList;
import java.util.List;
import java.util.*;

class TreeNode{
    int val;
    TreeNode left;
    TreeNode right;

    TreeNode(){
        this.val = 0;
        this.left = null;
        this.right = null;
    }
    TreeNode(int val){
        this.val = val;
        this.left = null;
        this.right = null;
    }
    TreeNode(int val,TreeNode left, TreeNode right){
        this.val = 0;
        this.left = null;
        this.right = null;
    }
}
public class Tree_LevelOrder_Traversal {
    //remove print addChildren

    public static List<List<Integer>> levelOrder(TreeNode node) {

        Queue<TreeNode> q = new ArrayDeque<>();
        List<List<Integer>> ans = new ArrayList<>();

        if(node == null){
            return ans;
        }
        q.add(node);

        while (q.size()>0){
            int s = q.size();
            List<Integer>temp = new ArrayList<>();

            while(s-->0){
                node = q.remove(); //remove

                temp.add(node.val); //print

                if(node.left != null){
                    q.add(node.left); // add children
                }
                if(node.right != null){
                    q.add(node.right); // add children
                }
            }
            ans.add(new ArrayList<>(temp));
        }
        return ans;
    }

    public static class Main {
        // Function to print
        // the elements of a list
        static void printList(List<Integer> list) {
            // Iterate through the
            // list and print each element
            for (int num : list) {
                System.out.print(num + " ");
            }
            System.out.println();
        }

        // Main function
        public static void main(String[] args) {
            // Creating a sample binary tree
//            TreeNode root = new TreeNode(1);
//            root.left = new TreeNode(2);
//            root.right = new TreeNode(3);
//            root.left.left = new TreeNode(4);
//            root.left.right = new TreeNode(5);

            TreeNode root = new TreeNode(50);
            root.left = new TreeNode(25);
            root.right = new TreeNode(30);
            root.left.left = new TreeNode(35);
            root.left.right = new TreeNode(40);
            root.right.left = new TreeNode(20);
            root.right.right = new TreeNode(60);
            root.left.right.right = new TreeNode(70);

            // Create an instance
            // of the Solution class
            Tree_LevelOrder_Traversal solution = new Tree_LevelOrder_Traversal();
            // Perform level-order traversal
            List<List<Integer>> result = Tree_LevelOrder_Traversal.levelOrder(root);

            System.out.println("Level Order Traversal of Tree:");

            // Printing the level order traversal result
            for (List<Integer> level : result) {
                printList(level);
            }
        }
    }

}

