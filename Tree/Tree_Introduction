class Node {
    int data;
    Node left;
    Node right;

    public Node(int key) {
        data = key;
        left = null;
        right = null;
    }
}

public class Tree_Introduction {

    // Method to display the binary tree
    public void Display_BT(Node root) {
        if (root == null) {
            return;
        }

        String s1 = "";

        if (root.left != null) {
            s1 += root.left.data;
        } else {
            s1 += ".";
        }

        s1 += "<--" + root.data + "-->";

        if (root.right != null) {
            s1 += root.right.data;
        } else {
            s1 += ".";
        }

        System.out.println(s1);

        Display_BT(root.left);
        Display_BT(root.right);
    }

    // Method to count the number of nodes in the binary tree
    public int countNodes(Node root) {
        if (root == null) {
            return 0;
        }
        return 1 + countNodes(root.left) + countNodes(root.right);
    }

    // Method to find the maximum value node in the binary tree
    public int findMax(Node root) {
        if (root == null) {
            return Integer.MIN_VALUE; // Return the smallest possible value if the tree is empty
        }

        int max = root.data;
        int leftMax = findMax(root.left);
        int rightMax = findMax(root.right);

        if (leftMax > max) {
            max = leftMax;
        }
        if (rightMax > max) {
            max = rightMax;
        }
        return max;
    }

    // Method to find the height of the tree
    public int findHeight(Node root) {
        if (root == null) {
            return -1; // Return -1 if the tree is empty (height of empty tree is -1)
        }

        int leftHeight = findHeight(root.left);
        int rightHeight = findHeight(root.right);

        return 1 + Math.max(leftHeight, rightHeight);
    }

    // Method to find the depth of a node in the tree
    public int findDepth(Node root, Node target, int depth) {
        if (root == null) {
            return -1; // Return -1 if the node is not found
        }

        if (root == target) {
            return depth;
        }

        int leftDepth = findDepth(root.left, target, depth + 1);
        if (leftDepth != -1) {
            return leftDepth;
        }

        return findDepth(root.right, target, depth + 1);
    }

    // Method to find the sum of all nodes in the binary tree
    public int sumOfNodes(Node root) {
        if (root == null) {
            return 0;
        }

        return root.data + sumOfNodes(root.left) + sumOfNodes(root.right);
    }

    public static void main(String[] args) {
        Tree_Introduction treeCount = new Tree_Introduction();

        Node root = new Node(50);
        root.left = new Node(25);
        root.right = new Node(30);
        root.left.left = new Node(35);
        root.left.right = new Node(40);
        root.right.left = new Node(20);
        root.right.right = new Node(60);
        root.left.right.right = new Node(70);

        treeCount.Display_BT(root);  // Call the Display_BT method to display the tree

        int totalNodes = treeCount.countNodes(root);  // Call the countNodes method to count the nodes
        System.out.println("Total number of nodes in the tree: " + totalNodes);

        int maxValue = treeCount.findMax(root);  // Call the findMax method to find the maximum value
        System.out.println("Maximum value in the tree: " + maxValue);

        int height = treeCount.findHeight(root);  // Call the findHeight method to find the height of the tree
        System.out.println("Height of the tree: " + height);

        int depth = treeCount.findDepth(root, root.left.right.right, 0);  // Call the findDepth method to find the depth of a specific node
        System.out.println("Depth of the node with value 70: " + depth);

        int sum = treeCount.sumOfNodes(root);  // Call the sumOfNodes method to find the sum of all nodes
        System.out.println("Sum of all nodes in the tree: " + sum);
    }
}
